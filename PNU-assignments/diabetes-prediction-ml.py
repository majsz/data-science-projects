# -*- coding: utf-8 -*-
"""assignment1(1).ipynb

    Diabetes Prediction Analysis
    Machine learning analysis using sklearn for diabetes progression prediction. Implemented and compared Linear, Lasso, and Ridge regression models. 
    Performed correlation analysis to identify most predictive features and evaluate model performance using RMSE.
    
Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QD5MS3JRpo1PjNPDcNWSCmh65O2IP61P
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from pandas.plotting import scatter_matrix

from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn.linear_model import Ridge

from sklearn.metrics import mean_squared_error

from sklearn.datasets import load_diabetes
diabetes = load_diabetes()
print(diabetes.DESCR)
dataset = pd.DataFrame(data=diabetes.data,
columns=diabetes.feature_names)
dataset['target'] = pd.DataFrame(diabetes.target)

dataset.head()

correlation = dataset.corr()
plt.figure(figsize=(11,11))
plt.title('Correlation Matrix')
sns.heatmap(correlation, vmax=1, square=True, annot=True, cmap='cubehelix')

correlations_target = correlation["target"].drop("target")
features = correlations_target.sort_values(ascending=False)
features.head(3)

y = dataset[['target']]
top_feature = features.index.tolist()
X1 = dataset[[top_feature[0]]]
model1 = LinearRegression()
res1 = model1.fit(X1, y)
res1

X2 = dataset[[top_feature[1]]]
model2 = LinearRegression()
res2 = model2.fit(X2, y)
res2

X3 = dataset[[top_feature[2]]]
model3 = LinearRegression()
res3 = model3.fit(X3, y)
res3

y_pred1 = res1.predict(X1)
y_pred2 = res2.predict(X2)
y_pred3 = res3.predict(X3)

rmse_results = {}

rmse1 = np.sqrt(mean_squared_error(y, y_pred1))
rmse_results[f"Linear Regression (Top Feature: {top_feature[0]})"] = rmse1
print(f"\nRMSE using {top_feature[0]}: {rmse1:.2f}")

rmse2 = np.sqrt(mean_squared_error(y, y_pred2))
rmse_results[f"Linear Regression (Second Feature: {top_feature[1]})"] = rmse2
print(f"RMSE using {top_feature[1]}: {rmse2:.2f}")

rmse3 = np.sqrt(mean_squared_error(y, y_pred3))
rmse_results[f"Linear Regression (Third Feature: {top_feature[2]})"] = rmse3
print(f"RMSE using {top_feature[2]}: {rmse3:.2f}")

X_all = dataset[top_feature[0:3]]
model_multi = LinearRegression()
res_multi = model_multi.fit(X_all, y)
y_pred_multi = res_multi.predict(X_all)
rmse_multi = np.sqrt(mean_squared_error(y, y_pred_multi))
rmse_results["Multiple Linear Regression"] = rmse_multi

print(f"RMSE using all 3 features (Multiple Linear Regression): {rmse_multi:.2f}")

model_lasso = Lasso()
res_lasso = model_lasso.fit(X_all, y)
y_pred_lasso = res_lasso.predict(X_all)
rmse_lasso = np.sqrt(mean_squared_error(y, y_pred_lasso))
rmse_results["Lasso Regression"] = rmse_lasso
print(f"RMSE using Lasso Regression: {rmse_lasso:.2f}")

model_ridge = Ridge()
res_ridge = model_ridge.fit(X_all, y)
y_pred_ridge = res_ridge.predict(X_all)
rmse_ridge = np.sqrt(mean_squared_error(y, y_pred_ridge))
rmse_results["Ridge Regression"] = rmse_ridge
print(f"RMSE using Ridge Regression: {rmse_ridge:.2f}")

model_lowest_rmse = min(rmse_results, key=rmse_results.get)
model_lowest_rmse
